#!/usr/bin/env node
const { platform, arch } = process;
const fs = require('fs');
const path = require('path');

// this script intentionally does not depend on the postinstall script, so it can act as fallback

const PLATFORMS = {
  win32: {
    x64: "buildctl-win32-x64/bin/buildctl.exe",
    arm64: "buildctl-win32-arm64/bin/buildctl.exe",
  },
  darwin: {
    x64: "buildctl-darwin-x64/bin/buildctl",
    arm64: "buildctl-darwin-arm64/bin/buildctl",
  },
  linux: {
    x64: "buildctl-linux-x64/bin/buildctl",
    arm64: "buildctl-linux-arm64/bin/buildctl",
    arm: "buildctl-linux-arm/bin/buildctl",
    ppc64: "buildctl-linux-ppc64le/bin/buildctl",
    riscv64: "buildctl-linux-riscv64/bin/buildctl",
    s390x: "buildctl-linux-s390x/bin/buildctl",
  },
};

const binPath = PLATFORMS?.[platform]?.[arch];
if (!binPath) {
  console.error(
    "The buildctl CLI package doesn't ship with prebuilt binaries for your platform",
    platform, arch
  );
  process.exit(1);
}

function showHelp() {
  console.log(`
buildctl-dockerfile - Simplified Docker-style interface for buildctl

USAGE:
  buildctl-dockerfile [OPTIONS] CONTEXT

OPTIONS:
  -f, --file DOCKERFILE    Path to the Dockerfile (default: Dockerfile in context)
  --build-arg KEY=VALUE    Set build arguments (can be used multiple times)
  -t, --tag IMAGE          Name and optionally tag for the built image
  --push                   Push the image to registry (requires -t/--tag or --output in passthrough)
  --dry-run                Print the buildctl command that would be executed
  -h, --help               Show this help message
  --                       Pass remaining arguments directly to buildctl

EXAMPLES:
  # Build with default Dockerfile in current directory
  buildctl-dockerfile .

  # Build with custom Dockerfile
  buildctl-dockerfile -f custom.Dockerfile .

  # Build with build arguments
  buildctl-dockerfile --build-arg NODE_VERSION=18 --build-arg ENV=production .

  # Build and tag the image
  buildctl-dockerfile -t myapp:latest .

  # Build, tag and push the image
  buildctl-dockerfile -t myregistry.com/myapp:latest --push .

  # Dry run to see the buildctl command
  buildctl-dockerfile --dry-run .

  # Combine options
  buildctl-dockerfile -f docker/Dockerfile -t myapp:v1.0 --build-arg VERSION=1.0 ./src

  # Pass additional buildctl options
  buildctl-dockerfile . -- --progress=plain --no-cache

  # Override output with passthrough arguments
  buildctl-dockerfile . -- --output type=registry,name=myregistry.com/image:latest,push=true

  # Merge push with passthrough output
  buildctl-dockerfile --push . -- --output type=registry,name=myregistry.com/image:latest

This command translates familiar docker build options into buildctl build syntax.
`);
}

function parseArgs(args) {
  const options = {
    dockerfile: null,
    buildArgs: [],
    tag: null,
    context: null,
    help: false,
    dryRun: false,
    push: false,
    passthroughArgs: []
  };

  // Find the -- separator if it exists
  const dashDashIndex = args.indexOf('--');
  let mainArgs = args;

  if (dashDashIndex !== -1) {
    mainArgs = args.slice(0, dashDashIndex);
    options.passthroughArgs = args.slice(dashDashIndex + 1);
  }

  for (let i = 0; i < mainArgs.length; i++) {
    const arg = mainArgs[i];
    
    if (arg === '-h' || arg === '--help') {
      options.help = true;
    } else if (arg === '--dry-run') {
      options.dryRun = true;
    } else if (arg === '--push') {
      options.push = true;
    } else if (arg === '-f' || arg === '--file') {
      if (i + 1 >= mainArgs.length) {
        throw new Error(`Option ${arg} requires a value`);
      }
      options.dockerfile = mainArgs[++i];
    } else if (arg === '--build-arg') {
      if (i + 1 >= mainArgs.length) {
        throw new Error(`Option ${arg} requires a value`);
      }
      options.buildArgs.push(mainArgs[++i]);
    } else if (arg === '-t' || arg === '--tag') {
      if (i + 1 >= mainArgs.length) {
        throw new Error(`Option ${arg} requires a value`);
      }
      options.tag = mainArgs[++i];
    } else if (!arg.startsWith('-')) {
      if (options.context) {
        throw new Error(`Multiple context paths specified: ${options.context} and ${arg}`);
      }
      options.context = arg;
    } else {
      throw new Error(`Unknown option: ${arg}`);
    }
  }

  return options;
}

function validateDockerfile(contextPath, dockerfilePath) {
  let fullDockerfilePath;
  
  if (dockerfilePath) {
    // Custom dockerfile path - can be relative to cwd or absolute
    if (path.isAbsolute(dockerfilePath)) {
      fullDockerfilePath = dockerfilePath;
    } else {
      fullDockerfilePath = path.resolve(dockerfilePath);
    }
  } else {
    // Default dockerfile in context
    fullDockerfilePath = path.resolve(contextPath, 'Dockerfile');
  }

  if (!fs.existsSync(fullDockerfilePath)) {
    throw new Error(`Dockerfile not found: ${fullDockerfilePath}`);
  }

  return fullDockerfilePath;
}

function buildBuildctlArgs(options) {
  const contextPath = path.resolve(options.context);
  const dockerfilePath = validateDockerfile(options.context, options.dockerfile);
  const dockerfileDir = path.dirname(dockerfilePath);
  
  const args = [
    'build',
    '--frontend', 'dockerfile.v0',
    '--local', `context=${contextPath}`,
    '--local', `dockerfile=${dockerfileDir}`
  ];

  // Add dockerfile filename if it's not the default
  const dockerfileName = path.basename(dockerfilePath);
  if (dockerfileName !== 'Dockerfile') {
    args.push('--opt', `filename=${dockerfileName}`);
  }

  // Add build arguments
  for (const buildArg of options.buildArgs) {
    if (!buildArg.includes('=')) {
      throw new Error(`Invalid build-arg format: ${buildArg}. Expected KEY=VALUE`);
    }
    args.push('--opt', `build-arg:${buildArg}`);
  }

  // Check if passthrough args contain --output
  const hasOutputInPassthrough = options.passthroughArgs.some(arg =>
    arg === '--output' || arg.startsWith('--output=')
  );

  // Validation logic for conflicting options
  if (options.push && !options.tag && !hasOutputInPassthrough) {
    throw new Error('--push requires -t/--tag or --output in passthrough arguments');
  }

  // Check for conflicting tag specifications
  if (options.tag && hasOutputInPassthrough) {
    // Check if passthrough output contains a name parameter
    const outputWithName = options.passthroughArgs.some(arg => {
      if (arg.startsWith('--output=')) {
        return arg.includes('name=');
      }
      // Check next arg if current is --output
      const outputIndex = options.passthroughArgs.indexOf('--output');
      if (outputIndex !== -1 && outputIndex < options.passthroughArgs.length - 1) {
        return options.passthroughArgs[outputIndex + 1].includes('name=');
      }
      return false;
    });
    
    if (outputWithName) {
      throw new Error('Cannot specify both -t/--tag and name= in passthrough --output');
    }
  }

  // Check for conflicting push specifications
  if (options.push && hasOutputInPassthrough) {
    const outputWithPush = options.passthroughArgs.some(arg => {
      if (arg.startsWith('--output=')) {
        return arg.includes('push=');
      }
      const outputIndex = options.passthroughArgs.indexOf('--output');
      if (outputIndex !== -1 && outputIndex < options.passthroughArgs.length - 1) {
        return options.passthroughArgs[outputIndex + 1].includes('push=');
      }
      return false;
    });
    
    if (outputWithPush) {
      throw new Error('Cannot specify both --push and push= in passthrough --output');
    }
  }

  // Add output (tag) only if not overridden by passthrough
  if (!hasOutputInPassthrough) {
    if (options.tag) {
      const pushValue = options.push ? 'true' : 'false';
      args.push('--output', `type=image,name=${options.tag},push=${pushValue}`);
    } else {
      // Default to docker output if no tag specified
      args.push('--output', 'type=docker');
    }
  }

  // Add passthrough arguments, potentially modifying --output to merge push
  if (options.passthroughArgs.length > 0) {
    const modifiedArgs = [...options.passthroughArgs];
    
    // If --push is specified and we have passthrough --output, merge push=true into it
    if (options.push && hasOutputInPassthrough) {
      for (let i = 0; i < modifiedArgs.length; i++) {
        if (modifiedArgs[i] === '--output' && i + 1 < modifiedArgs.length) {
          // --output value is in next argument
          const outputValue = modifiedArgs[i + 1];
          if (!outputValue.includes('push=')) {
            modifiedArgs[i + 1] = outputValue + ',push=true';
          }
        } else if (modifiedArgs[i].startsWith('--output=')) {
          // --output=value format
          const outputValue = modifiedArgs[i].substring(9);
          if (!outputValue.includes('push=')) {
            modifiedArgs[i] = '--output=' + outputValue + ',push=true';
          }
        }
      }
    }
    
    args.push(...modifiedArgs);
  }

  return args;
}

// Parse command line arguments
let options;
try {
  // Remove node and script name from argv
  let argv = process.argv.slice(2);
  
  // Handle case where this script is invoked as a subcommand
  if (argv[0] === 'dockerfile' || argv[0] === 'd') {
    argv = argv.slice(1);
  }
  
  options = parseArgs(argv);
} catch (error) {
  console.error(`Error: ${error.message}`);
  showHelp();
  process.exit(1);
}

// Show help if requested
if (options.help) {
  showHelp();
  process.exit(0);
}

// Validate required arguments
if (!options.context) {
  console.error('Error: Context path is required');
  showHelp();
  process.exit(1);
}

// Validate context path exists
if (!fs.existsSync(options.context)) {
  console.error(`Error: Context path does not exist: ${options.context}`);
  process.exit(1);
}

// Check if it's actually the dockerfile subcommand
const scriptName = path.basename(process.argv[1] || '');
const isDockerfileCommand = scriptName.includes('dockerfile') || 
                           scriptName.includes('buildctl-d') ||
                           process.argv.slice(2).includes('dockerfile') ||
                           process.argv.slice(2).includes('d');

if (!isDockerfileCommand) {
  // Pass through to regular buildctl
  const result = require("child_process").spawnSync(
    require.resolve(binPath),
    process.argv.slice(2),
    { shell: false, stdio: "inherit" },
  );
  if (result.error) throw result.error;
  process.exit(result.status);
}

// Build buildctl arguments
let buildctlArgs;
try {
  buildctlArgs = buildBuildctlArgs(options);
} catch (error) {
  console.error(`Error: ${error.message}`);
  process.exit(1);
}

// Execute buildctl with constructed arguments
if (options.dryRun) {
  console.log('buildctl ' + buildctlArgs.join(' '));
  process.exit(0);
}

const result = require("child_process").spawnSync(
  require.resolve(binPath),
  buildctlArgs,
  { shell: false, stdio: "inherit" },
);

if (result.error) {
  console.error(`Failed to execute buildctl: ${result.error.message}`);
  process.exit(1);
}

process.exit(result.status || 0);
